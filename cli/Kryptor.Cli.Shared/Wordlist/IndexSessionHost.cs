using System;
using System.Collections.Generic;
using System.IO;
using System.Text;

using SAPTeam.CommonTK;
using SAPTeam.Kryptor.Client;
using SAPTeam.Kryptor.Client.Security;

namespace SAPTeam.Kryptor.Cli.Wordlist
{
    public class IndexSessionHost : InstallSessionHost
    {
        public static string IndexBaseDir => Path.Combine(Program.Context.WordlistDirectory, "_index");

        private readonly string indexPath;

        private readonly string indexV2Path = "index.json";

        public override string LocalIndexPath => indexV2Path;

        public override string DownloadDir => Path.Combine(IndexBaseDir, "_downloadCache");

        public override string InstallDir => IndexBaseDir;

        public IndexSessionHost(GlobalOptions globalOptions, bool optimize, string indexPath) : base(globalOptions,
                                                                                      list: false,
#if DEBUG
                                                                                      all: false,
                                                                                      recommended: true,
#else
                                                                                      all: true,
                                                                                      recommended: false,
#endif
                                                                                      optimize: optimize,
                                                                                      ids: Array.Empty<string>()) => this.indexPath = indexPath;

        public override void Start(ClientContext context)
        {
            Config<WordlistIndexLegacy> IndexContainer = new Config<WordlistIndexLegacy>(indexPath);
            IndexContainer.Write();

            WordlistIndexLegacy Index = IndexContainer.Prefs;
            WordlistIndex IndexV2 = new WordlistIndex();

            foreach (KeyValuePair<string, WordlistIndexEntryLegacy> entry in Index.Wordlists)
            {
                string id = entry.Key.ToLower().Replace('_', '-').Replace(' ', '-');
                WordlistIndexEntry entryV2;

                if (IndexV2.ContainsId(id))
                {
                    entryV2 = IndexV2[id];
                }
                else
                {
                    entryV2 = new WordlistIndexEntry()
                    {
                        Id = id,
                    };

                    IndexV2.Add(entryV2);
                }

                entryV2.Name = entry.Value.Name;
                entryV2.Uri = entry.Value.DownloadUri;
                entryV2.Enforced = entry.Value.QuickCheckPriority == 0;
                entryV2.Compressed = entry.Value.Compressed;
            }

            if (File.Exists(indexV2Path))
            {
                File.Delete(indexV2Path);
            }

            this.Index = IndexV2;
            base.Start(context);

            if (File.Exists("Index.md"))
            {
                File.Delete("Index.md");
            }

            using (FileStream f = File.OpenWrite("Index.md"))
            {
                string header = "# Wordlist Index\n\n" +
                               $"Auto generated by Kryptor CLI v**{Program.Context.CliVersion}**\n\n" +
                               $"Last update time: **{DateTime.UtcNow} UTC**\n\n" +
                               $"Currently there are **{LocalIndex.Wordlists.Count}** available wordlists to download.\n\n" +
                               "| Identifier | Name | Lines | Words* | Size | Download |\n" +
                               "| :--------: | :--: | :---: | :----: | :--: | :------: |\n";

                string footer = "\n" +
                                "* The words counts optimized and calculated by `Wordlist Fragment Compiler`\n";

                byte[] headerBuffer = Encoding.UTF8.GetBytes(header);
                byte[] footerBuffer = Encoding.UTF8.GetBytes(footer);

                f.Write(headerBuffer, 0, headerBuffer.Length);

                foreach (WordlistIndexEntry entry in LocalIndex.Wordlists)
                {
                    string text = $"| {entry.Id} | {entry.Name} | {entry.Lines.FormatWithCommas()} | {entry.Words.FormatWithCommas()} | {Utilities.ConvertBytes(entry.Size)} | [{(entry.Compressed ? "Compressed File" : "Text File")}]({entry.Uri.OriginalString}) |\n";
                    byte[] buffer = Encoding.UTF8.GetBytes(text);
                    f.Write(buffer, 0, buffer.Length);
                }

                f.Write(footerBuffer, 0, footerBuffer.Length);
            }

            if (Directory.Exists(IndexBaseDir))
            {
                Directory.Delete(IndexBaseDir, true);
            }
        }
    }
}